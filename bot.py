import os
import re
import telebot
from dotenv import load_dotenv
from urllib.request import urlretrieve

# Load environment variables
load_dotenv()

# Initialize the bot
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

# Define the categories
categories = ["1.–ß–∞—Ç —Å—Ç—Ä–∏–Ω–≥–µ—Ä–æ–≤", "2.–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 360", "3.–¢–µ—Ä–º–∏–Ω–∞–ª –¥–æ—Ä–∞–±–æ—Ç–∫–∏", "4.–ú–ê –ü–æ–¥–º–°–µ–≥–æ–¥–Ω—è –º—É–Ω–∏—Ü–∏–ø–∞–ª—ã", "5.–¢–µ–∑–∏—Å—ã –∫ —Å–æ–∑–≤–æ–Ω–∞–º" , "6.–ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ–∑–≤–æ–Ω–æ–≤"]

def create_main_menu():
    markup = telebot.types.InlineKeyboardMarkup()
    for category in categories:
        save_button = telebot.types.InlineKeyboardButton("üíæ " + category.split(".")[1], callback_data="save_" + category)
        view_button = telebot.types.InlineKeyboardButton("üëÅ " + category.split(".")[1], callback_data="view_" + category)
        clear_button = telebot.types.InlineKeyboardButton("üóë " + category.split(".")[1], callback_data="clear_" + category)
        markup.row(save_button, view_button, clear_button)
    return markup

# Handler for /start command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = create_main_menu()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏:", reply_markup=markup)

@bot.message_handler(commands=['help'])
def send_welcome(message):
    markup = create_main_menu()
    bot.reply_to(message, "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n"
    "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –≥–ª–∞–∑–æ–º –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n",
    reply_markup=markup)

# Handler for inline keyboard button presses
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    action, category = call.data.split("_", 1)
    if action == "save":
        save_note_callback(call, category)
    elif action == "view":
        view_notes_callback(call, category)
    elif action == "clear":
        clear_notes_callback(call, category)

def save_note_callback(call, category):
    message = call.message
    bot.answer_callback_query(call.id, "–ó–∞–º–µ—Ç–∫–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {}".format(category.split(".")[1]))
    bot.edit_message_text("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:", message.chat.id, message.message_id)
    bot.register_next_step_handler(message, save_note, category)



def clear_notes_callback(call, category):
    message = call.message
    filename = category.split(".")[1].replace(" ", "_") + ".md"
    filepath = os.path.join(os.getcwd(), filename)
    try:
        with open(filepath, "w", encoding="utf-8") as f:
            f.write("")
        bot.answer_callback_query(call.id, "–ó–∞–º–µ—Ç–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.".format(category.split(".")[1]))
    except FileNotFoundError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
def view_notes_callback(call, category):
    message = call.message
    filename = category.split(".")[1].replace(" ", "_") + ".md"
    filepath = os.path.join(os.getcwd(), filename)
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            file_content = f.read()
        bot.answer_callback_query(call.id)
        bot.send_message(message.chat.id, file_content)
    except FileNotFoundError:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def save_note(message, category):
    clean_message = re.sub(r'\\d+', '', message.text).strip()
    filename = category.split(".")[1].replace(" ", "_") + ".md"
    filepath = os.path.join(os.getcwd(), filename)
    with open(filepath, "a", encoding="utf-8") as f:
        f.write("üìå " + clean_message + "\n\n")
    bot.reply_to(message, f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.split('.')[1]}")
    markup = create_main_menu()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏:", reply_markup=markup)

# Start the bot
bot.polling()